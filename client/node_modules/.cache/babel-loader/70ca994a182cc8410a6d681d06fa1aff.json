{"ast":null,"code":"var _jsxFileName = \"D:\\\\554\\\\code-warriors\\\\client\\\\src\\\\components\\\\messenger\\\\Messenger.js\",\n    _s = $RefreshSig$();\n\nimport Navigation from \"../Navigation\";\nimport Conversations from \"./Conversations\";\nimport Message from \"./Message\";\nimport \"./messenger.css\";\nimport { useNavigate, Navigate } from \"react-router-dom\";\nimport cryptojs from \"crypto-js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../../App.css\";\nimport axios from \"axios\";\nimport { io } from \"socket.io-client\";\nimport { data } from \"jquery\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Messenger() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [convoData, setConvoData] = useState([]);\n  const [currrentChat, setCurrrentChat] = useState(null);\n  const [currrentChat1, setCurrrentChat1] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newmessages, setNewMessages] = useState(\"\");\n  const [arrivalMessage, setArrivalMessages] = useState(null);\n  const socket = useRef(io(\"ws://localhost:8900\"));\n  const [id, setId] = useState(\"\");\n  const [session, setSession] = useState(false);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [fnd, setFnd] = useState([]);\n  const [offline, setOffline] = useState(false);\n  const scrollRef = useRef();\n  let idd;\n  useEffect(() => {\n    async function checkSession() {\n      try {\n        const instance = axios.create({\n          baseURL: \"*\",\n          timeout: 20000,\n          withCredentials: true,\n          headers: {\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          },\n          validateStatus: function (status) {\n            return status < 500; // Resolve only if the status code is less than 500\n          }\n        });\n        const {\n          data\n        } = await instance.get(`http://localhost:3000/session`);\n        console.log(data);\n\n        if (\"error\" in data) {\n          setSession(false);\n          setLoading(false); // return;\n        } else {\n          let bytes1 = cryptojs.AES.decrypt(data._id, \"MySecretKey\");\n          console.log(bytes1);\n          let tempid = JSON.parse(bytes1.toString(cryptojs.enc.Utf8));\n          let tempid1 = localStorage.getItem(\"userSession\");\n          let bytes = cryptojs.AES.decrypt(tempid1, \"MySecretKey\");\n          console.log(bytes); // let decid = JSON.parse(temp);\n\n          let decid = JSON.parse(bytes.toString(cryptojs.enc.Utf8));\n          console.log(decid);\n\n          if (tempid === decid.toString()) {\n            setId(decid);\n            console.log(\"here\");\n            console.log(\"works\");\n            setSession(true);\n          } else {\n            setSession(false);\n            setLoading(false);\n          } // return;\n\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    if (localStorage.length !== 0) {\n      console.log(\"here\");\n      checkSession();\n\n      if (session) {\n        fetchdata();\n        setLoading(false);\n      } //return;\n\n    } else {\n      console.log(\"here in the outer if\");\n      setLoading(false);\n      setSession(false);\n    }\n  }, [session]);\n  useEffect(() => {\n    socket.current = io(\"ws://localhost:8900\");\n    socket.current.on(\"getMessage\", data => {\n      // if (data.status) {\n      setArrivalMessages({\n        senderId: data.senderId,\n        message: data.message,\n        createdAt: Date.now()\n      }); // } else {\n      //   setOffline(true);\n      // }\n    });\n  }, []);\n  useEffect(() => {\n    arrivalMessage && (currrentChat1 === null || currrentChat1 === void 0 ? void 0 : currrentChat1.members.includes(arrivalMessage.senderId)) && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currrentChat1]);\n\n  async function fetchdata() {\n    const instance = axios.create({\n      baseURL: \"*\",\n      timeout: 20000,\n      withCredentials: true,\n      headers: {\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n      validateStatus: function (status) {\n        return status < 500; // Resolve only if the status code is less than 500\n      }\n    });\n    const resp = await instance.get(`http://localhost:3000/conversation/getconvo/${id}`);\n    console.log(resp);\n\n    if (resp.data.result) {\n      setConvoData(resp.data.data);\n    } else {\n      console.log(\"user not found\"); //set state for user profile not found\n    }\n  }\n\n  useEffect(() => {\n    async function fetchMesgData() {\n      try {\n        const instance = axios.create({\n          baseURL: \"*\",\n          timeout: 20000,\n          withCredentials: true,\n          headers: {\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          },\n          validateStatus: function (status) {\n            return status < 500; // Resolve only if the status code is less than 500\n          }\n        });\n        const resp = await instance.get(`http://localhost:3000/message/getmessage/${currrentChat}`);\n        setMessages(resp.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchMesgData();\n  }, [currrentChat]);\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  useEffect(() => {\n    socket.current.emit(\"addUser\", id);\n    socket.current.on(\"getUsers\", users => {\n      setOnlineUsers(users);\n    });\n  }, [id]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    let newMessage = {\n      sender: id,\n      conversationId: currrentChat,\n      message: newmessages\n    }; //if (!offline) {\n\n    const recId = currrentChat1.members.find(member => member != id);\n    console.log(recId);\n    let encpmsg = cryptojs.AES.encrypt(JSON.stringify(newmessages), \"MySecretKey\").toString();\n    socket.current.emit(\"sendMessage\", {\n      senderId: id,\n      receiverId: recId,\n      message: encpmsg\n    }); // }\n\n    const instance = axios.create({\n      baseURL: \"*\",\n      timeout: 20000,\n      withCredentials: true,\n      headers: {\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n      validateStatus: function (status) {\n        return status < 500; // Resolve only if the status code is less than 500\n      }\n    });\n    await instance.post(`http://localhost:3000/message/addmessage`, newMessage).then(function (response) {\n      setMessages([...messages, response.data.newMessage]);\n      setNewMessages(\"\");\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this);\n  } else {\n    if (!session) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messenger\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatMenu\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatMenuWrapper\",\n              children: convoData.length > 0 ? convoData.map(d => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  onClick: () => {\n                    setCurrrentChat(d._id);\n                    setCurrrentChat1(d);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(Conversations, {\n                    conversationid: d._id,\n                    id1: d.members[0],\n                    id2: d.members[1],\n                    userid: id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 25\n                  }, this)\n                }, d._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 23\n                }, this);\n              }) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"no friends to show\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatBox\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatBoxWrapper\",\n              children: currrentChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chatBoxTop\",\n                  children: messages.map(m => /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: scrollRef,\n                    children: /*#__PURE__*/_jsxDEV(Message, {\n                      message: m,\n                      own: m.senderId == id,\n                      id1: currrentChat1.members[0],\n                      id2: currrentChat1.members[1],\n                      userid: id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 276,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chatBoxBottom\",\n                  children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                    className: \"chatMessageInput\",\n                    placeholder: \"write your message here...\",\n                    onChange: e => setNewMessages(e.target.value),\n                    value: newmessages\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 287,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"chatSubmitButton\",\n                    onClick: handleSubmit,\n                    children: \"Send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 293,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"OPen a conversation to chat\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n  }\n}\n\n_s(Messenger, \"I8+PjP09AhmGJLFt6ZcZpG14dPg=\");\n\n_c = Messenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messenger\");","map":{"version":3,"names":["Navigation","Conversations","Message","useNavigate","Navigate","cryptojs","React","useState","useEffect","useRef","axios","io","data","Messenger","loading","setLoading","convoData","setConvoData","currrentChat","setCurrrentChat","currrentChat1","setCurrrentChat1","messages","setMessages","newmessages","setNewMessages","arrivalMessage","setArrivalMessages","socket","id","setId","session","setSession","onlineUsers","setOnlineUsers","fnd","setFnd","offline","setOffline","scrollRef","idd","checkSession","instance","create","baseURL","timeout","withCredentials","headers","validateStatus","status","get","console","log","bytes1","AES","decrypt","_id","tempid","JSON","parse","toString","enc","Utf8","tempid1","localStorage","getItem","bytes","decid","e","length","fetchdata","current","on","senderId","message","createdAt","Date","now","members","includes","prev","resp","result","fetchMesgData","error","scrollIntoView","behavior","emit","users","handleSubmit","preventDefault","newMessage","sender","conversationId","recId","find","member","encpmsg","encrypt","stringify","receiverId","post","then","response","catch","map","d","m","target","value"],"sources":["D:/554/code-warriors/client/src/components/messenger/Messenger.js"],"sourcesContent":["import Navigation from \"../Navigation\";\r\nimport Conversations from \"./Conversations\";\r\nimport Message from \"./Message\";\r\nimport \"./messenger.css\";\r\nimport { useNavigate, Navigate } from \"react-router-dom\";\r\nimport cryptojs from \"crypto-js\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport \"../../App.css\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport { io } from \"socket.io-client\";\r\nimport { data } from \"jquery\";\r\n\r\nexport default function Messenger() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [convoData, setConvoData] = useState([]);\r\n  const [currrentChat, setCurrrentChat] = useState(null);\r\n  const [currrentChat1, setCurrrentChat1] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newmessages, setNewMessages] = useState(\"\");\r\n  const [arrivalMessage, setArrivalMessages] = useState(null);\r\n  const socket = useRef(io(\"ws://localhost:8900\"));\r\n  const [id, setId] = useState(\"\");\r\n  const [session, setSession] = useState(false);\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const [fnd, setFnd] = useState([]);\r\n  const [offline, setOffline] = useState(false);\r\n\r\n  const scrollRef = useRef();\r\n  let idd;\r\n\r\n  useEffect(() => {\r\n    async function checkSession() {\r\n      try {\r\n        const instance = axios.create({\r\n          baseURL: \"*\",\r\n          timeout: 20000,\r\n          withCredentials: true,\r\n          headers: {\r\n            \"Content-Type\": \"application/json;charset=UTF-8\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n          },\r\n          validateStatus: function (status) {\r\n            return status < 500; // Resolve only if the status code is less than 500\r\n          },\r\n        });\r\n\r\n        const { data } = await instance.get(`http://localhost:3000/session`);\r\n        console.log(data);\r\n        if (\"error\" in data) {\r\n          setSession(false);\r\n          setLoading(false);\r\n          // return;\r\n        } else {\r\n          let bytes1 = cryptojs.AES.decrypt(data._id, \"MySecretKey\");\r\n          console.log(bytes1);\r\n          let tempid = JSON.parse(bytes1.toString(cryptojs.enc.Utf8));\r\n\r\n          let tempid1 = localStorage.getItem(\"userSession\");\r\n          let bytes = cryptojs.AES.decrypt(tempid1, \"MySecretKey\");\r\n          console.log(bytes);\r\n          // let decid = JSON.parse(temp);\r\n          let decid = JSON.parse(bytes.toString(cryptojs.enc.Utf8));\r\n          console.log(decid);\r\n          if (tempid === decid.toString()) {\r\n            setId(decid);\r\n            console.log(\"here\");\r\n            console.log(\"works\");\r\n            setSession(true);\r\n          } else {\r\n            setSession(false);\r\n            setLoading(false);\r\n          }\r\n          // return;\r\n        }\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n\r\n    if (localStorage.length !== 0) {\r\n      console.log(\"here\");\r\n      checkSession();\r\n      if (session) {\r\n        fetchdata();\r\n        setLoading(false);\r\n      }\r\n      //return;\r\n    } else {\r\n      console.log(\"here in the outer if\");\r\n      setLoading(false);\r\n      setSession(false);\r\n    }\r\n  }, [session]);\r\n\r\n  useEffect(() => {\r\n    socket.current = io(\"ws://localhost:8900\");\r\n    socket.current.on(\"getMessage\", (data) => {\r\n      // if (data.status) {\r\n      setArrivalMessages({\r\n        senderId: data.senderId,\r\n        message: data.message,\r\n        createdAt: Date.now(),\r\n      });\r\n      // } else {\r\n      //   setOffline(true);\r\n      // }\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    arrivalMessage &&\r\n      currrentChat1?.members.includes(arrivalMessage.senderId) &&\r\n      setMessages((prev) => [...prev, arrivalMessage]);\r\n  }, [arrivalMessage, currrentChat1]);\r\n\r\n  async function fetchdata() {\r\n    const instance = axios.create({\r\n      baseURL: \"*\",\r\n      timeout: 20000,\r\n      withCredentials: true,\r\n      headers: {\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n      validateStatus: function (status) {\r\n        return status < 500; // Resolve only if the status code is less than 500\r\n      },\r\n    });\r\n\r\n    const resp = await instance.get(\r\n      `http://localhost:3000/conversation/getconvo/${id}`\r\n    );\r\n\r\n    console.log(resp);\r\n    if (resp.data.result) {\r\n      setConvoData(resp.data.data);\r\n    } else {\r\n      console.log(\"user not found\");\r\n      //set state for user profile not found\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchMesgData() {\r\n      try {\r\n        const instance = axios.create({\r\n          baseURL: \"*\",\r\n          timeout: 20000,\r\n          withCredentials: true,\r\n          headers: {\r\n            \"Content-Type\": \"application/json;charset=UTF-8\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n          },\r\n          validateStatus: function (status) {\r\n            return status < 500; // Resolve only if the status code is less than 500\r\n          },\r\n        });\r\n\r\n        const resp = await instance.get(\r\n          `http://localhost:3000/message/getmessage/${currrentChat}`\r\n        );\r\n\r\n        setMessages(resp.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchMesgData();\r\n  }, [currrentChat]);\r\n\r\n  useEffect(() => {\r\n    scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    socket.current.emit(\"addUser\", id);\r\n    socket.current.on(\"getUsers\", (users) => {\r\n      setOnlineUsers(users);\r\n    });\r\n  }, [id]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let newMessage = {\r\n      sender: id,\r\n      conversationId: currrentChat,\r\n      message: newmessages,\r\n    };\r\n    //if (!offline) {\r\n    const recId = currrentChat1.members.find((member) => member != id);\r\n    console.log(recId);\r\n    let encpmsg = cryptojs.AES.encrypt(\r\n      JSON.stringify(newmessages),\r\n      \"MySecretKey\"\r\n    ).toString();\r\n    socket.current.emit(\"sendMessage\", {\r\n      senderId: id,\r\n      receiverId: recId,\r\n      message: encpmsg,\r\n    });\r\n    // }\r\n    const instance = axios.create({\r\n      baseURL: \"*\",\r\n      timeout: 20000,\r\n      withCredentials: true,\r\n      headers: {\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n      validateStatus: function (status) {\r\n        return status < 500; // Resolve only if the status code is less than 500\r\n      },\r\n    });\r\n    await instance\r\n      .post(`http://localhost:3000/message/addmessage`, newMessage)\r\n      .then(function (response) {\r\n        setMessages([...messages, response.data.newMessage]);\r\n        setNewMessages(\"\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div>\r\n        <h1>Loading...</h1>\r\n      </div>\r\n    );\r\n  } else {\r\n    if (!session) {\r\n      return <Navigate to=\"/\" replace />;\r\n    } else {\r\n      return (\r\n        <>\r\n          <Navigation></Navigation>\r\n          <div className=\"messenger\">\r\n            <div className=\"chatMenu\">\r\n              <div className=\"chatMenuWrapper\">\r\n                {convoData.length > 0 ? (\r\n                  convoData.map((d) => {\r\n                    return (\r\n                      <div\r\n                        key={d._id}\r\n                        onClick={() => {\r\n                          setCurrrentChat(d._id);\r\n                          setCurrrentChat1(d);\r\n                        }}\r\n                      >\r\n                        <Conversations\r\n                          conversationid={d._id}\r\n                          id1={d.members[0]}\r\n                          id2={d.members[1]}\r\n                          userid={id}\r\n                        />\r\n                      </div>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <p>no friends to show</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className=\"chatBox\">\r\n              <div className=\"chatBoxWrapper\">\r\n                {currrentChat ? (\r\n                  <>\r\n                    <div className=\"chatBoxTop\">\r\n                      {messages.map((m) => (\r\n                        <div ref={scrollRef}>\r\n                          <Message\r\n                            message={m}\r\n                            own={m.senderId == id}\r\n                            id1={currrentChat1.members[0]}\r\n                            id2={currrentChat1.members[1]}\r\n                            userid={id}\r\n                          />\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                    <div className=\"chatBoxBottom\">\r\n                      <textarea\r\n                        className=\"chatMessageInput\"\r\n                        placeholder=\"write your message here...\"\r\n                        onChange={(e) => setNewMessages(e.target.value)}\r\n                        value={newmessages}\r\n                      ></textarea>\r\n                      <button\r\n                        className=\"chatSubmitButton\"\r\n                        onClick={handleSubmit}\r\n                      >\r\n                        Send\r\n                      </button>\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  <span>OPen a conversation to chat</span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,eAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,iBAAP;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,kBAAtC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AAEA,OAAO,eAAP;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,EAAT,QAAmB,kBAAnB;AACA,SAASC,IAAT,QAAqB,QAArB;;;AAEA,eAAe,SAASC,SAAT,GAAqB;EAAA;;EAClC,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,IAAD,CAAhD;EACA,MAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,IAAD,CAAlD;EACA,MAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACmB,cAAD,EAAiBC,kBAAjB,IAAuCpB,QAAQ,CAAC,IAAD,CAArD;EACA,MAAMqB,MAAM,GAAGnB,MAAM,CAACE,EAAE,CAAC,qBAAD,CAAH,CAArB;EACA,MAAM,CAACkB,EAAD,EAAKC,KAAL,IAAcvB,QAAQ,CAAC,EAAD,CAA5B;EACA,MAAM,CAACwB,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM,CAAC0B,WAAD,EAAcC,cAAd,IAAgC3B,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAAC4B,GAAD,EAAMC,MAAN,IAAgB7B,QAAQ,CAAC,EAAD,CAA9B;EACA,MAAM,CAAC8B,OAAD,EAAUC,UAAV,IAAwB/B,QAAQ,CAAC,KAAD,CAAtC;EAEA,MAAMgC,SAAS,GAAG9B,MAAM,EAAxB;EACA,IAAI+B,GAAJ;EAEAhC,SAAS,CAAC,MAAM;IACd,eAAeiC,YAAf,GAA8B;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAGhC,KAAK,CAACiC,MAAN,CAAa;UAC5BC,OAAO,EAAE,GADmB;UAE5BC,OAAO,EAAE,KAFmB;UAG5BC,eAAe,EAAE,IAHW;UAI5BC,OAAO,EAAE;YACP,gBAAgB,gCADT;YAEP,+BAA+B;UAFxB,CAJmB;UAQ5BC,cAAc,EAAE,UAAUC,MAAV,EAAkB;YAChC,OAAOA,MAAM,GAAG,GAAhB,CADgC,CACX;UACtB;QAV2B,CAAb,CAAjB;QAaA,MAAM;UAAErC;QAAF,IAAW,MAAM8B,QAAQ,CAACQ,GAAT,CAAc,+BAAd,CAAvB;QACAC,OAAO,CAACC,GAAR,CAAYxC,IAAZ;;QACA,IAAI,WAAWA,IAAf,EAAqB;UACnBoB,UAAU,CAAC,KAAD,CAAV;UACAjB,UAAU,CAAC,KAAD,CAAV,CAFmB,CAGnB;QACD,CAJD,MAIO;UACL,IAAIsC,MAAM,GAAGhD,QAAQ,CAACiD,GAAT,CAAaC,OAAb,CAAqB3C,IAAI,CAAC4C,GAA1B,EAA+B,aAA/B,CAAb;UACAL,OAAO,CAACC,GAAR,CAAYC,MAAZ;UACA,IAAII,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWN,MAAM,CAACO,QAAP,CAAgBvD,QAAQ,CAACwD,GAAT,CAAaC,IAA7B,CAAX,CAAb;UAEA,IAAIC,OAAO,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAd;UACA,IAAIC,KAAK,GAAG7D,QAAQ,CAACiD,GAAT,CAAaC,OAAb,CAAqBQ,OAArB,EAA8B,aAA9B,CAAZ;UACAZ,OAAO,CAACC,GAAR,CAAYc,KAAZ,EAPK,CAQL;;UACA,IAAIC,KAAK,GAAGT,IAAI,CAACC,KAAL,CAAWO,KAAK,CAACN,QAAN,CAAevD,QAAQ,CAACwD,GAAT,CAAaC,IAA5B,CAAX,CAAZ;UACAX,OAAO,CAACC,GAAR,CAAYe,KAAZ;;UACA,IAAIV,MAAM,KAAKU,KAAK,CAACP,QAAN,EAAf,EAAiC;YAC/B9B,KAAK,CAACqC,KAAD,CAAL;YACAhB,OAAO,CAACC,GAAR,CAAY,MAAZ;YACAD,OAAO,CAACC,GAAR,CAAY,OAAZ;YACApB,UAAU,CAAC,IAAD,CAAV;UACD,CALD,MAKO;YACLA,UAAU,CAAC,KAAD,CAAV;YACAjB,UAAU,CAAC,KAAD,CAAV;UACD,CAnBI,CAoBL;;QACD;MACF,CA1CD,CA0CE,OAAOqD,CAAP,EAAU;QACVjB,OAAO,CAACC,GAAR,CAAYgB,CAAZ;MACD;IACF;;IAED,IAAIJ,YAAY,CAACK,MAAb,KAAwB,CAA5B,EAA+B;MAC7BlB,OAAO,CAACC,GAAR,CAAY,MAAZ;MACAX,YAAY;;MACZ,IAAIV,OAAJ,EAAa;QACXuC,SAAS;QACTvD,UAAU,CAAC,KAAD,CAAV;MACD,CAN4B,CAO7B;;IACD,CARD,MAQO;MACLoC,OAAO,CAACC,GAAR,CAAY,sBAAZ;MACArC,UAAU,CAAC,KAAD,CAAV;MACAiB,UAAU,CAAC,KAAD,CAAV;IACD;EACF,CA9DQ,EA8DN,CAACD,OAAD,CA9DM,CAAT;EAgEAvB,SAAS,CAAC,MAAM;IACdoB,MAAM,CAAC2C,OAAP,GAAiB5D,EAAE,CAAC,qBAAD,CAAnB;IACAiB,MAAM,CAAC2C,OAAP,CAAeC,EAAf,CAAkB,YAAlB,EAAiC5D,IAAD,IAAU;MACxC;MACAe,kBAAkB,CAAC;QACjB8C,QAAQ,EAAE7D,IAAI,CAAC6D,QADE;QAEjBC,OAAO,EAAE9D,IAAI,CAAC8D,OAFG;QAGjBC,SAAS,EAAEC,IAAI,CAACC,GAAL;MAHM,CAAD,CAAlB,CAFwC,CAOxC;MACA;MACA;IACD,CAVD;EAWD,CAbQ,EAaN,EAbM,CAAT;EAeArE,SAAS,CAAC,MAAM;IACdkB,cAAc,KACZN,aADY,aACZA,aADY,uBACZA,aAAa,CAAE0D,OAAf,CAAuBC,QAAvB,CAAgCrD,cAAc,CAAC+C,QAA/C,CADY,CAAd,IAEElD,WAAW,CAAEyD,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUtD,cAAV,CAAX,CAFb;EAGD,CAJQ,EAIN,CAACA,cAAD,EAAiBN,aAAjB,CAJM,CAAT;;EAMA,eAAekD,SAAf,GAA2B;IACzB,MAAM5B,QAAQ,GAAGhC,KAAK,CAACiC,MAAN,CAAa;MAC5BC,OAAO,EAAE,GADmB;MAE5BC,OAAO,EAAE,KAFmB;MAG5BC,eAAe,EAAE,IAHW;MAI5BC,OAAO,EAAE;QACP,gBAAgB,gCADT;QAEP,+BAA+B;MAFxB,CAJmB;MAQ5BC,cAAc,EAAE,UAAUC,MAAV,EAAkB;QAChC,OAAOA,MAAM,GAAG,GAAhB,CADgC,CACX;MACtB;IAV2B,CAAb,CAAjB;IAaA,MAAMgC,IAAI,GAAG,MAAMvC,QAAQ,CAACQ,GAAT,CAChB,+CAA8CrB,EAAG,EADjC,CAAnB;IAIAsB,OAAO,CAACC,GAAR,CAAY6B,IAAZ;;IACA,IAAIA,IAAI,CAACrE,IAAL,CAAUsE,MAAd,EAAsB;MACpBjE,YAAY,CAACgE,IAAI,CAACrE,IAAL,CAAUA,IAAX,CAAZ;IACD,CAFD,MAEO;MACLuC,OAAO,CAACC,GAAR,CAAY,gBAAZ,EADK,CAEL;IACD;EACF;;EAED5C,SAAS,CAAC,MAAM;IACd,eAAe2E,aAAf,GAA+B;MAC7B,IAAI;QACF,MAAMzC,QAAQ,GAAGhC,KAAK,CAACiC,MAAN,CAAa;UAC5BC,OAAO,EAAE,GADmB;UAE5BC,OAAO,EAAE,KAFmB;UAG5BC,eAAe,EAAE,IAHW;UAI5BC,OAAO,EAAE;YACP,gBAAgB,gCADT;YAEP,+BAA+B;UAFxB,CAJmB;UAQ5BC,cAAc,EAAE,UAAUC,MAAV,EAAkB;YAChC,OAAOA,MAAM,GAAG,GAAhB,CADgC,CACX;UACtB;QAV2B,CAAb,CAAjB;QAaA,MAAMgC,IAAI,GAAG,MAAMvC,QAAQ,CAACQ,GAAT,CAChB,4CAA2ChC,YAAa,EADxC,CAAnB;QAIAK,WAAW,CAAC0D,IAAI,CAACrE,IAAN,CAAX;MACD,CAnBD,CAmBE,OAAOwE,KAAP,EAAc;QACdjC,OAAO,CAACC,GAAR,CAAYgC,KAAZ;MACD;IACF;;IACDD,aAAa;EACd,CA1BQ,EA0BN,CAACjE,YAAD,CA1BM,CAAT;EA4BAV,SAAS,CAAC,MAAM;IAAA;;IACd,sBAAA+B,SAAS,CAACgC,OAAV,0EAAmBc,cAAnB,CAAkC;MAAEC,QAAQ,EAAE;IAAZ,CAAlC;EACD,CAFQ,EAEN,CAAChE,QAAD,CAFM,CAAT;EAIAd,SAAS,CAAC,MAAM;IACdoB,MAAM,CAAC2C,OAAP,CAAegB,IAAf,CAAoB,SAApB,EAA+B1D,EAA/B;IACAD,MAAM,CAAC2C,OAAP,CAAeC,EAAf,CAAkB,UAAlB,EAA+BgB,KAAD,IAAW;MACvCtD,cAAc,CAACsD,KAAD,CAAd;IACD,CAFD;EAGD,CALQ,EAKN,CAAC3D,EAAD,CALM,CAAT;;EAOA,MAAM4D,YAAY,GAAG,MAAOrB,CAAP,IAAa;IAChCA,CAAC,CAACsB,cAAF;IAEA,IAAIC,UAAU,GAAG;MACfC,MAAM,EAAE/D,EADO;MAEfgE,cAAc,EAAE3E,YAFD;MAGfwD,OAAO,EAAElD;IAHM,CAAjB,CAHgC,CAQhC;;IACA,MAAMsE,KAAK,GAAG1E,aAAa,CAAC0D,OAAd,CAAsBiB,IAAtB,CAA4BC,MAAD,IAAYA,MAAM,IAAInE,EAAjD,CAAd;IACAsB,OAAO,CAACC,GAAR,CAAY0C,KAAZ;IACA,IAAIG,OAAO,GAAG5F,QAAQ,CAACiD,GAAT,CAAa4C,OAAb,CACZxC,IAAI,CAACyC,SAAL,CAAe3E,WAAf,CADY,EAEZ,aAFY,EAGZoC,QAHY,EAAd;IAIAhC,MAAM,CAAC2C,OAAP,CAAegB,IAAf,CAAoB,aAApB,EAAmC;MACjCd,QAAQ,EAAE5C,EADuB;MAEjCuE,UAAU,EAAEN,KAFqB;MAGjCpB,OAAO,EAAEuB;IAHwB,CAAnC,EAfgC,CAoBhC;;IACA,MAAMvD,QAAQ,GAAGhC,KAAK,CAACiC,MAAN,CAAa;MAC5BC,OAAO,EAAE,GADmB;MAE5BC,OAAO,EAAE,KAFmB;MAG5BC,eAAe,EAAE,IAHW;MAI5BC,OAAO,EAAE;QACP,gBAAgB,gCADT;QAEP,+BAA+B;MAFxB,CAJmB;MAQ5BC,cAAc,EAAE,UAAUC,MAAV,EAAkB;QAChC,OAAOA,MAAM,GAAG,GAAhB,CADgC,CACX;MACtB;IAV2B,CAAb,CAAjB;IAYA,MAAMP,QAAQ,CACX2D,IADG,CACG,0CADH,EAC8CV,UAD9C,EAEHW,IAFG,CAEE,UAAUC,QAAV,EAAoB;MACxBhF,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAciF,QAAQ,CAAC3F,IAAT,CAAc+E,UAA5B,CAAD,CAAX;MACAlE,cAAc,CAAC,EAAD,CAAd;IACD,CALG,EAMH+E,KANG,CAMG,UAAUpB,KAAV,EAAiB;MACtBjC,OAAO,CAACC,GAAR,CAAYgC,KAAZ;IACD,CARG,CAAN;EASD,CA1CD;;EA4CA,IAAItE,OAAJ,EAAa;IACX,oBACE;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAKD,CAND,MAMO;IACL,IAAI,CAACiB,OAAL,EAAc;MACZ,oBAAO,QAAC,QAAD;QAAU,EAAE,EAAC,GAAb;QAAiB,OAAO;MAAxB;QAAA;QAAA;QAAA;MAAA,QAAP;IACD,CAFD,MAEO;MACL,oBACE;QAAA,wBACE,QAAC,UAAD;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAK,SAAS,EAAC,WAAf;UAAA,wBACE;YAAK,SAAS,EAAC,UAAf;YAAA,uBACE;cAAK,SAAS,EAAC,iBAAf;cAAA,UACGf,SAAS,CAACqD,MAAV,GAAmB,CAAnB,GACCrD,SAAS,CAACyF,GAAV,CAAeC,CAAD,IAAO;gBACnB,oBACE;kBAEE,OAAO,EAAE,MAAM;oBACbvF,eAAe,CAACuF,CAAC,CAAClD,GAAH,CAAf;oBACAnC,gBAAgB,CAACqF,CAAD,CAAhB;kBACD,CALH;kBAAA,uBAOE,QAAC,aAAD;oBACE,cAAc,EAAEA,CAAC,CAAClD,GADpB;oBAEE,GAAG,EAAEkD,CAAC,CAAC5B,OAAF,CAAU,CAAV,CAFP;oBAGE,GAAG,EAAE4B,CAAC,CAAC5B,OAAF,CAAU,CAAV,CAHP;oBAIE,MAAM,EAAEjD;kBAJV;oBAAA;oBAAA;oBAAA;kBAAA;gBAPF,GACO6E,CAAC,CAAClD,GADT;kBAAA;kBAAA;kBAAA;gBAAA,QADF;cAgBD,CAjBD,CADD,gBAoBC;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YArBJ;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA,QADF,eA2BE;YAAK,SAAS,EAAC,SAAf;YAAA,uBACE;cAAK,SAAS,EAAC,gBAAf;cAAA,UACGtC,YAAY,gBACX;gBAAA,wBACE;kBAAK,SAAS,EAAC,YAAf;kBAAA,UACGI,QAAQ,CAACmF,GAAT,CAAcE,CAAD,iBACZ;oBAAK,GAAG,EAAEpE,SAAV;oBAAA,uBACE,QAAC,OAAD;sBACE,OAAO,EAAEoE,CADX;sBAEE,GAAG,EAAEA,CAAC,CAAClC,QAAF,IAAc5C,EAFrB;sBAGE,GAAG,EAAET,aAAa,CAAC0D,OAAd,CAAsB,CAAtB,CAHP;sBAIE,GAAG,EAAE1D,aAAa,CAAC0D,OAAd,CAAsB,CAAtB,CAJP;sBAKE,MAAM,EAAEjD;oBALV;sBAAA;sBAAA;sBAAA;oBAAA;kBADF;oBAAA;oBAAA;oBAAA;kBAAA,QADD;gBADH;kBAAA;kBAAA;kBAAA;gBAAA,QADF,eAcE;kBAAK,SAAS,EAAC,eAAf;kBAAA,wBACE;oBACE,SAAS,EAAC,kBADZ;oBAEE,WAAW,EAAC,4BAFd;oBAGE,QAAQ,EAAGuC,CAAD,IAAO3C,cAAc,CAAC2C,CAAC,CAACwC,MAAF,CAASC,KAAV,CAHjC;oBAIE,KAAK,EAAErF;kBAJT;oBAAA;oBAAA;oBAAA;kBAAA,QADF,eAOE;oBACE,SAAS,EAAC,kBADZ;oBAEE,OAAO,EAAEiE,YAFX;oBAAA;kBAAA;oBAAA;oBAAA;oBAAA;kBAAA,QAPF;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAdF;cAAA,gBADW,gBA+BX;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAhCJ;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA,QA3BF;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA,gBADF;IAsED;EACF;AACF;;GAvSuB5E,S;;KAAAA,S"},"metadata":{},"sourceType":"module"}